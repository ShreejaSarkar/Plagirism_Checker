# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iWRu2sh4tqEdt4RsVL5QJA3ewPMd3rxW
"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Example texts
original_text = "This is an original text for testing."
copied_text = "This is a copied text for testing."

# Preprocess texts
texts = [original_text, copied_text]

# Create TF-IDF vectors
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(texts)

# Calculate cosine similarity
cosine_similarities = linear_kernel(tfidf_matrix[0], tfidf_matrix[1]).flatten()
jaccard_similarity = cosine_similarities[0]  # Cosine similarity is the same as Jaccard similarity for TF-IDF vectors

print(f"Jaccard Similarity: {jaccard_similarity}")

import re
from collections import Counter
import math

def preprocess_text(text):
    # Convert text to lowercase and remove punctuation
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    return text

def calculate_cosine_similarity(vector1, vector2):
    intersection = set(vector1.keys()) & set(vector2.keys())
    dot_product = sum(vector1[x] * vector2[x] for x in intersection)
    magnitude1 = math.sqrt(sum(vector1[x] ** 2 for x in vector1))
    magnitude2 = math.sqrt(sum(vector2[x] ** 2 for x in vector2))
    similarity = dot_product / (magnitude1 * magnitude2)
    return similarity

def get_text_vector(text):
    words = text.split()
    word_counts = Counter(words)
    return word_counts

# Example texts
original_text = "This is an original text for testing."
copied_text = "This is a copied text for testing."

# Preprocess and get vectors
original_vector = get_text_vector(preprocess_text(original_text))
copied_vector = get_text_vector(preprocess_text(copied_text))

# Calculate similarity
similarity = calculate_cosine_similarity(original_vector, copied_vector)
print(f"Cosine Similarity: {similarity}")